#!/usr/bin/env python3
"""
Script de d√©marrage simplifi√© de l'API CV Processing
Version minimale sans v√©rification des mod√®les IA avanc√©s
"""

import uvicorn
import os
import sys
from pathlib import Path

# Ajout du r√©pertoire courant au PYTHONPATH
sys.path.insert(0, str(Path(__file__).parent))

from utils.logger import setup_logger

def main():
    """Fonction principale de d√©marrage simplifi√©e"""
    
    # Configuration du logger
    logger = setup_logger("cv_processing_api")
    
    logger.info("=" * 50)
    logger.info("D√©marrage de l'API CV Processing (Version Simplifi√©e)")
    logger.info("=" * 50)
    
    # Configuration de base
    HOST = "0.0.0.0"
    PORT = 8000
    DEBUG = True
    LOG_LEVEL = "info"
    
    # Affichage de la configuration
    logger.info(f"Version: 1.0.0")
    logger.info(f"Environnement: D√©veloppement")
    logger.info(f"H√¥te: {HOST}")
    logger.info(f"Port: {PORT}")
    logger.info(f"Mode debug: {DEBUG}")
    
    # V√©rification des dossiers
    logger.info("V√©rification des dossiers...")
    directories = ["uploads", "outputs", "logs"]
    for directory in directories:
        dir_path = Path(directory)
        if dir_path.exists():
            logger.info(f"‚úì Dossier {directory}: OK")
        else:
            logger.info(f"üìÅ Cr√©ation du dossier {directory}...")
            dir_path.mkdir(exist_ok=True)
            logger.info(f"‚úì Dossier {directory}: Cr√©√©")
    
    # V√©rification des modules essentiels
    logger.info("V√©rification des modules essentiels...")
    try:
        import fastapi
        logger.info("‚úì FastAPI: Disponible")
    except ImportError as e:
        logger.error(f"‚ùå FastAPI: Erreur - {str(e)}")
        sys.exit(1)
    
    try:
        import uvicorn
        logger.info("‚úì Uvicorn: Disponible")
    except ImportError as e:
        logger.error(f"‚ùå Uvicorn: Erreur - {str(e)}")
        sys.exit(1)
    
    try:
        import PyPDF2
        logger.info("‚úì PyPDF2: Disponible")
    except ImportError as e:
        logger.error(f"‚ùå PyPDF2: Erreur - {str(e)}")
        sys.exit(1)
    
    try:
        import PIL
        logger.info("‚úì Pillow (PIL): Disponible")
    except ImportError as e:
        logger.error(f"‚ùå Pillow: Erreur - {str(e)}")
        sys.exit(1)
    
    try:
        import aiofiles
        logger.info("‚úì Aiofiles: Disponible")
    except ImportError as e:
        logger.error(f"‚ùå Aiofiles: Erreur - {str(e)}")
        sys.exit(1)
    
    # V√©rification des services
    logger.info("V√©rification des services...")
    try:
        from services.cv_processor_simple import CVProcessorSimple
        from services.ai_extractor_improved import AIExtractorImproved
        from utils.file_handler import FileHandler
        
        # Test d'initialisation des services
        cv_processor = CVProcessorSimple()
        ai_extractor = AIExtractorImproved()
        file_handler = FileHandler()
        
        logger.info("‚úì Services: Initialis√©s avec succ√®s")
    except Exception as e:
        logger.error(f"‚ùå Services: Erreur d'initialisation - {str(e)}")
        sys.exit(1)
    
    # D√©marrage du serveur
    logger.info("D√©marrage du serveur uvicorn...")
    
    try:
        uvicorn.run(
            "main:app",
            host=HOST,
            port=PORT,
            reload=DEBUG,
            log_level=LOG_LEVEL,
            access_log=True
        )
    except KeyboardInterrupt:
        logger.info("Arr√™t du serveur demand√© par l'utilisateur")
    except Exception as e:
        logger.error(f"Erreur lors du d√©marrage du serveur: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()



